[{"/home/zeneto/Documents/GitHub/banginder-web/banginder/src/index.jsx":"1","/home/zeneto/Documents/GitHub/banginder-web/banginder/src/containers/Login/Login.jsx":"2","/home/zeneto/Documents/GitHub/banginder-web/banginder/src/containers/TinderCard/TinderCards.jsx":"3","/home/zeneto/Documents/GitHub/banginder-web/banginder/src/containers/Chat/Chat.jsx":"4","/home/zeneto/Documents/GitHub/banginder-web/banginder/src/containers/Cadastro/Cadastro.jsx":"5","/home/zeneto/Documents/GitHub/banginder-web/banginder/src/components/Header/Header.jsx":"6","/home/zeneto/Documents/GitHub/banginder-web/banginder/src/auth.jsx":"7","/home/zeneto/Documents/GitHub/banginder-web/banginder/src/containers/ChatScreen/ChatScreen.jsx":"8","/home/zeneto/Documents/GitHub/banginder-web/banginder/src/containers/Perfil/Perfil.jsx":"9","/home/zeneto/Documents/GitHub/banginder-web/banginder/src/components/SwipeButtons/SwipeButtons.jsx":"10","/home/zeneto/Documents/GitHub/banginder-web/banginder/src/App.jsx":"11"},{"size":221,"mtime":1607618903105,"results":"12","hashOfConfig":"13"},{"size":2188,"mtime":1607690320105,"results":"14","hashOfConfig":"13"},{"size":4975,"mtime":1607687425245,"results":"15","hashOfConfig":"13"},{"size":2495,"mtime":1607692751623,"results":"16","hashOfConfig":"13"},{"size":1957,"mtime":1607691199060,"results":"17","hashOfConfig":"13"},{"size":1289,"mtime":1607687685278,"results":"18","hashOfConfig":"13"},{"size":87,"mtime":1607686398327,"results":"19","hashOfConfig":"13"},{"size":3647,"mtime":1607687830404,"results":"20","hashOfConfig":"13"},{"size":2553,"mtime":1607691216438,"results":"21","hashOfConfig":"13"},{"size":1216,"mtime":1607645049328,"results":"22","hashOfConfig":"13"},{"size":2591,"mtime":1607685880625,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"y6myno",{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"46"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/zeneto/Documents/GitHub/banginder-web/banginder/src/index.jsx",[],["51","52"],"/home/zeneto/Documents/GitHub/banginder-web/banginder/src/containers/Login/Login.jsx",["53"],"/home/zeneto/Documents/GitHub/banginder-web/banginder/src/containers/TinderCard/TinderCards.jsx",["54","55","56"],"/home/zeneto/Documents/GitHub/banginder-web/banginder/src/containers/Chat/Chat.jsx",["57","58","59","60"],"import React, { useState, useEffect } from \"react\";\nimport Header from \"../../components/Header/Header\";\nimport \"./Chat.css\";\nimport ChatRow from \"../../components/ChatRow/ChatRow\";\nimport firebase from \"firebase/app\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nfunction Chat() {\n  const [exists, setExists] = useState(false);\n  const [people, setPeople] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const userUid = localStorage.getItem(\"user_id\");\n  useEffect(() => {\n    const firestore = firebase.firestore();\n    setLoading(true);\n    firestore\n      .collection(\"Hate\")\n      .doc(userUid)\n      .collection(\"HateList\")\n      .get()\n      .then((snap) => {\n        console.log(snap.docs[0].data());\n        const HateList = snap.docs.map((e) => {\n          return {\n            uid: e.id,\n            message: e.data().message.filter((e) => e.text !== \"\")[0]?.text,\n          };\n        });\n        HateList.filter((e) => {\n          const doc = firestore\n            .collection(\"Hate\")\n            .doc(e.uid)\n            .collection(\"HateList\")\n            .doc(userUid)\n            .get();\n          return true;\n        }).forEach((e) => {\n          firestore\n            .collection(\"registerInfo\")\n            .doc(e.uid)\n            .get()\n            .then((snap) => {\n              const data = snap.data();\n              setPeople((people) => [\n                ...people,\n                {\n                  name: data?.name,\n                  url: data?.url,\n                  uid: data?.uid,\n                  message: e?.message,\n                },\n              ]);\n            });\n        });\n        setLoading(false);\n      })\n      .catch(() => setLoading(false));\n    return async () => {\n      setPeople([]);\n    };\n  }, []);\n\n  if (loading) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          width: \"100%\",\n          height: \"90vh\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <CircularProgress size={80} />\n      </div>\n    );\n  }\n  return (\n    <React.Fragment>\n      <Header backButton=\"/perfis\" />\n      <div className=\"chat\">\n        {people.map((p) => (\n          <ChatRow\n            key={p.uid}\n            uid={p.uid}\n            name={p.name}\n            timestamp=\"algum tempo atrÃ¡s atras\"\n            profilePic={p.url}\n            message={p.message}\n          />\n        ))}\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Chat;\n","/home/zeneto/Documents/GitHub/banginder-web/banginder/src/containers/Cadastro/Cadastro.jsx",["61"],"/home/zeneto/Documents/GitHub/banginder-web/banginder/src/components/Header/Header.jsx",["62"],"/home/zeneto/Documents/GitHub/banginder-web/banginder/src/auth.jsx",[],"/home/zeneto/Documents/GitHub/banginder-web/banginder/src/containers/ChatScreen/ChatScreen.jsx",["63"],"import React, { useState, useEffect } from \"react\";\nimport \"./ChatScreen.css\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport Header from \"../../components/Header/Header\";\nimport firebase from \"firebase/app\";\nimport { CircularProgress } from \"@material-ui/core\";\n\nfunction ChatScreen(props) {\n  const enemyId = window.location.href.split(\"/chat/\")[1];\n  const [input, setInput] = useState(\"\");\n  const userUid = localStorage.getItem(\"user_id\");\n  const [loading, setLoading] = useState(false);\n  const [messages, setMessages] = useState([]);\n  const [list, setList] = useState([]);\n\n  function compare(a, b) {\n    if (a.date > b.date) {\n      return 1;\n    }\n    if (a.date < b.date) {\n      return -1;\n    }\n    return 0;\n  }\n\n  useEffect(() => {\n    const firestore = firebase.firestore();\n    setLoading(true);\n    firestore\n      .collection(\"Hate\")\n      .doc(enemyId)\n      .collection(\"HateList\")\n      .doc(userUid)\n      .get()\n      .then((snap) => {\n        const data = snap.data();\n        if (!data) {\n          return;\n        }\n        setMessages(\n          data.message.map((m) => {\n            return { uid: enemyId, ...m };\n          })\n        );\n        firestore\n          .collection(\"Hate\")\n          .doc(userUid)\n          .collection(\"HateList\")\n          .doc(enemyId)\n          .get()\n          .then((snap) => {\n            const data = snap.data();\n            if (data) setMessages((messages) => [...messages, ...data.message]);\n          });\n      });\n    setMessages((messages) => messages.sort(compare));\n    setLoading(false);\n    return () => {\n      setMessages([]);\n    };\n  }, []);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const firestore = firebase.firestore();\n    const time = new Date();\n    const obj = { text: input, date: `${time}` };\n    setMessages([...messages, { message: input }]);\n    firestore\n      .collection(\"Hate\")\n      .doc(userUid)\n      .collection(\"HateList\")\n      .doc(enemyId)\n      .get()\n      .then((snap) => {\n        const data = snap.data();\n        setList(data.message);\n        firestore\n          .collection(\"Hate\")\n          .doc(userUid)\n          .collection(\"HateList\")\n          .doc(enemyId)\n          .set({\n            message: [obj, ...list],\n          });\n      });\n\n    setInput(\"\");\n  };\n  if (loading) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          width: \"100%\",\n          height: \"90vh\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n        }}\n      >\n        <CircularProgress size={80} />\n      </div>\n    );\n  }\n  return (\n    <React.Fragment>\n      <Header backButton=\"/chat\" />\n      <div className=\"chatScreen\">\n        {messages.map((message) =>\n          message.uid ? (\n            <div className=\"chatMessage\">\n              <Avatar className=\"avatar\" src={message.image} />\n              <p className=\"message\">{message.text}</p>\n            </div>\n          ) : (\n            <div className=\"chatMessage\">\n              <p className=\"messageUser\">{message.text}</p>\n            </div>\n          )\n        )}\n\n        <form className=\"enviarMensagens\">\n          <input\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            className=\"texto\"\n            type=\"text\"\n            placeholder=\"Digite sua mensagem\"\n          />\n          <button onClick={handleSubmit} type=\"submit\" className=\"button\" style={{display: \"flex\",textAlign:\"center\", justifyContent: \"center\", alignItems: \"center\", }}>\n            ENVIAR\n          </button>\n        </form>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default ChatScreen;\n","/home/zeneto/Documents/GitHub/banginder-web/banginder/src/containers/Perfil/Perfil.jsx",["64","65"],"import Header from \"../../components/Header/Header\";\nimport firebase from \"firebase/app\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport './Perfil.css'\n\nimport React, {useState, useEffect} from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\n\nfunction cardTaste(taste, listName) {\n    return (\n        <div className={\"card-tastes\"}>\n            <h3>{listName}</h3>\n            <div style={{overflowY: 'auto', height: '480px', marginTop: '5px'}}>\n                {taste?.map(\n                    (x) =>\n                        <div className={\"card-item\"}>\n                            <p>{x}</p>\n                        </div>\n                )}\n            </div>\n        </div>\n    )\n}\n\nexport default function Perfil(props) {\n    const [profile, setProfile] = useState({\n        url: \"\",\n        name: \"\",\n        bio: \"\",\n        likes: [],\n        dislikes: [],\n    });\n\n\n    useEffect(() => {\n        const userUid = localStorage.getItem(\"user_id\");\n        const firestore = firebase.firestore();\n        firestore\n            .collection(\"registerInfo\")\n            .doc(userUid)\n            .get()\n            .then((snap) => {\n                const data = snap.data();\n                console.log(data);\n                setProfile((profile) => {\n                        return {\n                            name: data.name + \" \" + data?.surname,\n                            url: data.url,\n                            bio: data.bio,\n                            likes: data.likes,\n                            dislikes: data.dislikes,\n                        }\n                    }\n                );\n            });\n\n        return async () => {\n            setProfile([]);\n        };\n    }, []);\n\n    return (\n        <React.Fragment>\n            <Header/>\n            <div className={\"perfil\"}>\n                <div className={\"user-head\"}>\n                    <img src={profile && profile.url} alt=\"\" style={{width: '100px', height: '100px'}}/>\n                    <div>\n                        <h3>{profile && profile.name}</h3>\n                        <div style={{height: '1rem'}}/>\n                        <p>{profile.bio}</p>\n                    </div>\n                </div>\n                <div className={\"container-user\"}>\n                    <div className={\"user-body\"}>\n\n\n                        {cardTaste(profile?.likes,\"Gosto\")}\n                        {cardTaste(profile?.dislikes,\"Ãdio\")}\n\n\n                    </div>\n\n\n                </div>\n            </div>\n        </React.Fragment>\n    );\n}\n",["66","67"],"/home/zeneto/Documents/GitHub/banginder-web/banginder/src/components/SwipeButtons/SwipeButtons.jsx",[],"/home/zeneto/Documents/GitHub/banginder-web/banginder/src/App.jsx",["68","69"],{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":5,"column":9,"nodeType":"76","messageId":"77","endLine":5,"endColumn":13},{"ruleId":"74","severity":1,"message":"78","line":2,"column":8,"nodeType":"76","messageId":"77","endLine":2,"endColumn":20},{"ruleId":"74","severity":1,"message":"79","line":13,"column":12,"nodeType":"76","messageId":"77","endLine":13,"endColumn":18},{"ruleId":"80","severity":1,"message":"81","line":87,"column":6,"nodeType":"82","endLine":87,"endColumn":8,"suggestions":"83"},{"ruleId":"74","severity":1,"message":"84","line":9,"column":10,"nodeType":"76","messageId":"77","endLine":9,"endColumn":16},{"ruleId":"74","severity":1,"message":"85","line":9,"column":18,"nodeType":"76","messageId":"77","endLine":9,"endColumn":27},{"ruleId":"74","severity":1,"message":"86","line":30,"column":17,"nodeType":"76","messageId":"77","endLine":30,"endColumn":20},{"ruleId":"80","severity":1,"message":"81","line":61,"column":6,"nodeType":"82","endLine":61,"endColumn":8,"suggestions":"87"},{"ruleId":"74","severity":1,"message":"75","line":5,"column":9,"nodeType":"76","messageId":"77","endLine":5,"endColumn":13},{"ruleId":"74","severity":1,"message":"75","line":7,"column":10,"nodeType":"76","messageId":"77","endLine":7,"endColumn":14},{"ruleId":"80","severity":1,"message":"88","line":61,"column":6,"nodeType":"82","endLine":61,"endColumn":8,"suggestions":"89"},{"ruleId":"74","severity":1,"message":"90","line":3,"column":8,"nodeType":"76","messageId":"77","endLine":3,"endColumn":18},{"ruleId":"74","severity":1,"message":"91","line":7,"column":8,"nodeType":"76","messageId":"77","endLine":7,"endColumn":17},{"ruleId":"70","replacedBy":"92"},{"ruleId":"72","replacedBy":"93"},{"ruleId":"74","severity":1,"message":"94","line":4,"column":8,"nodeType":"76","messageId":"77","endLine":4,"endColumn":14},{"ruleId":"74","severity":1,"message":"78","line":10,"column":8,"nodeType":"76","messageId":"77","endLine":10,"endColumn":20},"no-native-reassign",["95"],"no-negated-in-lhs",["96"],"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","'SwipeButtons' is defined but never used.","'getAge' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userUid'. Either include it or remove the dependency array.","ArrayExpression",["97"],"'exists' is assigned a value but never used.","'setExists' is assigned a value but never used.","'doc' is assigned a value but never used.",["98"],"React Hook useEffect has missing dependencies: 'enemyId' and 'userUid'. Either include them or remove the dependency array.",["99"],"'DeleteIcon' is defined but never used.","'TextField' is defined but never used.",["95"],["96"],"'Header' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"100","fix":"101"},{"desc":"100","fix":"102"},{"desc":"103","fix":"104"},"Update the dependencies array to be: [userUid]",{"range":"105","text":"106"},{"range":"107","text":"106"},"Update the dependencies array to be: [enemyId, userUid]",{"range":"108","text":"109"},[2469,2471],"[userUid]",[1781,1783],[1625,1627],"[enemyId, userUid]"]